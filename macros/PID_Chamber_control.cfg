
############### Config options ##################

[gcode_macro _BEDFANVARS]
variable_threshold: 90        # If bed temp target is above this threshold, fans will be enabled. If temp is set to below this threshold, fans will be disabled.
variable_fast: 0.8            # Fan speed once bed temp is reached
variable_slow: 0.1            # Fan speed while bed is heating
variable_fast_c: 0.8          # Fan speed for chamber temp control once bed temp is reached
variable_slow_c: 0.05          # Fan speed for chamber temp control while bed is heating
variable_factor: 0.5          # Factor by which the inner bed fans run versus outer
variable_chamber_target: 55   # Target chamber temperature to maintain
#variable_test: 1
variable_pid_kp: 0.08         # Proportional gain - Tune this
variable_pid_ki: 0.003       # Integral gain - Tune this
variable_pid_kd: 1.0          # Derivative gain - Tune this
#variable_pid_kd: 0.1          # Derivative gain - Tune this
#variable_pid_kp: 0.12         # Proportional gain - Tune this
#variable_pid_ki: 0.002       # Integral gain - Tune this
#variable_pid_kd: 0.05          # Derivative gain - Tune this
#variable_pid_kp: 0.15         # Proportional gain - Tune this
#variable_pid_ki: 0.001       # Integral gain - Tune this
#variable_pid_kd: 0.025          # Derivative gain - Tune this
variable_pid_dt: 10           # Time difference (seconds) - Matches loop duration
variable_pid_i_limit: 0.5     # Limit for integral term to prevent windup
variable_integral: 0.0        # Initial value for integral
variable_previous_error: 0.0  # Initial value for previous error
gcode:

########## Bed Fans #########

#[fan_generic BedFans]
#pin: #PUT YOUR PIN HERE
#cycle_time: 0.04
#kick_start_time: 0.25

########## Bed Fans #########
#Inner
[multi_pin inner_bed_fan_pins]
pins: PE5, PD12
[fan_generic BedInner]
#pin: PE5 ####
pin: multi_pin:inner_bed_fan_pins
cycle_time: 0.04
kick_start_time: 0.5

[multi_pin outer_bed_fan_pins]
pins: PA8, PD13
[fan_generic BedOuter]
pin: multi_pin:outer_bed_fan_pins
cycle_time: 0.04
kick_start_time: 0.5

########## Aliases #########

[gcode_macro _BEDFANSSLOW]
gcode:
    # Vars

    #{% set OUTERSLOW = printer["gcode_macro _BEDFANVARS"].variable_slow|float %}
    #{% set INNERSLOW = printer["gcode_macro _BEDFANVARS"].variable_fast|float %}
    {% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}
    {% set FACTOR = printer["gcode_macro _BEDFANVARS"].factor|float %}
    SET_FAN_SPEED FAN=BedOuter SPEED={SLOW}
    SET_FAN_SPEED FAN=BedInner SPEED={SLOW*FACTOR}


[gcode_macro _BEDFANSFAST]
gcode:
    # Vars
    #{% set INNERFAST = printer["gcode_macro _BEDFANVARS"].innerfast|float %}
    #{% set OUTERFAST = printer["gcode_macro _BEDFANVARS"].variable_fast|float %}
    {% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}
    {% set FACTOR = printer["gcode_macro _BEDFANVARS"].factor|float %}

    SET_FAN_SPEED FAN=BedOuter SPEED={FAST}
    SET_FAN_SPEED FAN=BedInner SPEED={FAST*FACTOR}



[gcode_macro _BEDFANSOFF]
gcode:
    SET_FAN_SPEED FAN=BedInner SPEED=0
    #SET_FAN_SPEED FAN=BedInnerR SPEED=0
    SET_FAN_SPEED FAN=BedOuter SPEED=0
    #SET_FAN_SPEED FAN=BedOuterR SPEED=0
    #SET_FAN_SPEED FAN=BedFans SPEED=0

############ Command overrides ############

[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
    {% set HEATER = params.HEATER|default("None") %}
    {% set TARGET = params.TARGET|default(0)|int %}
    {% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}

    {% if HEATER|lower == "extruder" %}
        M104 S{TARGET}  # Set extruder temperature directly
    {% elif HEATER|lower == "heater_bed" %}
        M140 S{TARGET}  # Set bed temperature directly
    {% else %}
        {action_respond_info("Heater %s not supported" % HEATER)}
    {% endif %}

    {% if HEATER|lower == "heater_bed" %}
        {% if TARGET >= THRESHOLD %}
            _BEDFANSSLOW
            UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1
        {% else %}
            _BEDFANSOFF
            UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0  # Stop loop if below threshold
        {% endif %}
    {% endif %}

# Override M190 (Wait for Bed Temperature)
[gcode_macro M190]
rename_existing: M99190
gcode:
    {% set S = params.S|int %}
    {% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}

    {% if S >= THRESHOLD %}
        _BEDFANSSLOW  # Start fans at slow speed while heating
    {% else %}
        _BEDFANSOFF  # Turn off fans if bed temp is below threshold
    {% endif %}                                         

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  # Set bed temp

    {% if S != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}  # Wait for bed temp within 5 degrees
    {% endif %}

    {% if S >= THRESHOLD %}  
        _BEDFANSFAST  # Set fans to fast speed after reaching target temp
    {% endif %}

# Replace TURN_OFF_HEATERS
[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
    _BEDFANSOFF
    _TURN_OFF_HEATERS

################ Monitoring loop #####################

[delayed_gcode bedfanloop]
gcode:
    {% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
    {% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}
    {% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}
    {% set FAST_C = printer["gcode_macro _BEDFANVARS"].fast_c|float %}
    {% set SLOW_C = printer["gcode_macro _BEDFANVARS"].slow_c|float %}
    {% set FACTOR = printer["gcode_macro _BEDFANVARS"].factor|float %}
    {% set CHAMBER_TARGET = printer["gcode_macro _BEDFANVARS"].chamber_target|float %}
    #{% set TESTER = printer["gcode_macro _BEDFANVARS"].test|float %}
    #{ action_respond_info("test=" ~ TESTER) }

    {% set KP = printer["gcode_macro _BEDFANVARS"].pid_kp|float %}
    {% set KI = printer["gcode_macro _BEDFANVARS"].pid_ki|float %}
    {% set KD = printer["gcode_macro _BEDFANVARS"].pid_kd|float %}
    {% set DT = printer["gcode_macro _BEDFANVARS"].pid_dt|float %}
    {% set I_LIMIT = printer["gcode_macro _BEDFANVARS"].pid_i_limit|float %}
    {% set INTEGRAL = printer["gcode_macro _BEDFANVARS"].integral|float %}
    {% set PREVIOUS_ERROR = printer["gcode_macro _BEDFANVARS"].previous_error|float %}

    
    #{ action_respond_info("PID Params: Kp=" ~ KP ~ ", Ki=" ~ KI ~ ", Kd=" ~ KD ~ ", Dt=" ~ DT ~ ", I_Limit=" ~ I_LIMIT ~ ", Integral=" ~ INTEGRAL ~ ", PrevError=" ~ PREVIOUS_ERROR) }




    SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=previous_error VALUE={PREVIOUS_ERROR}
    SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=integral VALUE={INTEGRAL}

    #FIX ME - use the right temp SENSOR
    {% set CHAMBER_TEMP = printer["temperature_sensor chamber_temp_low"].temperature|float %}
    { action_respond_info("Bed Fan Loop: Target=" ~ printer.heater_bed.target ~ " Temp=" ~ printer.heater_bed.temperature ~ " Chamber=" ~ CHAMBER_TEMP) }
    {% if printer.heater_bed.target >= THRESHOLD %}
        #{ action_respond_info("Bed Target >= Threshold (" ~ THRESHOLD ~ ")") }
        {% if printer.heater_bed.temperature >= (printer.heater_bed.target - 1) %}
            {% if (CHAMBER_TEMP +4) < CHAMBER_TARGET %}
                #Cold chamber, max out fans
                { action_respond_info("Chamber Temp (" ~ CHAMBER_TEMP ~ ") >= Target (" ~ CHAMBER_TARGET ~ ") - Maxing out fans") }
                SET_FAN_SPEED FAN=BedOuter SPEED={FAST_C}
                SET_FAN_SPEED FAN=BedInner SPEED={FAST_C*FACTOR}
                SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=previous_error VALUE={0.0}
                SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=integral VALUE={0.0}
            {% elif (CHAMBER_TEMP -4 ) >= CHAMBER_TARGET %}
                { action_respond_info("Chamber Temp (" ~ CHAMBER_TEMP ~ ") >= Target (" ~ CHAMBER_TARGET ~ ") - Setting Slow Chamber Speed") }
                #SET_FAN_SPEED FAN=BedFans SPEED={SLOW_C}  # Use chamber control slow speed
                SET_FAN_SPEED FAN=BedOuter SPEED={SLOW_C}
                SET_FAN_SPEED FAN=BedInner SPEED={SLOW_C*FACTOR}
                SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=previous_error VALUE={0.0}
                SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=integral VALUE={0.0}
            {% else %}

                { action_respond_info("Bed Temp Reached Target +/- 4") }
                #{% set proportional_gain = 0.2 %} ; Tune this value
     
                #{ action_respond_info("Chamber Control Active (PID)") }

                {% set error = CHAMBER_TARGET - CHAMBER_TEMP %}
                {% set proportional = error * KP %}
                #{ action_respond_info("1") }
                {% set INTEGRAL = INTEGRAL + (error * KI * DT) %}

                {% if INTEGRAL > I_LIMIT %}
                    {% set INTEGRAL = I_LIMIT %}
                {% elif INTEGRAL < -I_LIMIT %}
                    {% set INTEGRAL = -I_LIMIT %}
                {% endif %}
                #{ action_respond_info("2") }
                {% set derivative = (error - PREVIOUS_ERROR) / DT * KD %}
                #{ action_respond_info("3") }

                {% set adjustment = proportional + INTEGRAL + derivative %}
                #{ action_respond_info("4") }
   
     
                #{% set adjustment = (CHAMBER_TARGET - CHAMBER_TEMP) * KP %}
                #{% set adjustment = (proportional) %}
                #{% set outer_fan = [SLOW_C+adjustment, 1]|min %}
                #{% set inner_fan = outer_fan*FACTOR %}

                {% set calculated_outer_fan = SLOW_C + adjustment %}
                {% if calculated_outer_fan < SLOW_C %}
                    {% set outer_fan = SLOW_C %}
                {% elif calculated_outer_fan > FAST_C %}
                    {% set outer_fan = FAST_C %}
                {% else %}
                    {% set outer_fan = calculated_outer_fan %}
                {% endif %}

                {% set calculated_inner_fan = outer_fan * FACTOR %}
                {% if calculated_inner_fan < SLOW_C %}
                    {% set inner_fan = SLOW_C %}
                {% elif calculated_inner_fan > FAST_C %}
                    {% set inner_fan = FAST_C %}
                {% else %}
                    {% set inner_fan = calculated_inner_fan %}
                {% endif %}


                #{ action_respond_info("Chamber Control - Adjust: %.3f, Outer: %.3f, Inner: %.3f" % (adjustment, outer_fan, inner_fan)) }
                { action_respond_info("Chamber PID (PID): Error=%.3f, P=%.3f, I=%.3f, D=%.3f, Adjust=%.3f, Outer=%.3f, Inner=%.3f" % (error, proportional, INTEGRAL, derivative, adjustment, outer_fan, inner_fan)) }


                SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=previous_error VALUE={error}
                SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=integral VALUE={INTEGRAL}

                #SET_FAN_SPEED FAN=BedFans SPEED={FAST_C}  # Use chamber control fast speed
                SET_FAN_SPEED FAN=BedOuter SPEED={outer_fan}
                SET_FAN_SPEED FAN=BedInner SPEED={inner_fan}
                #{ action_respond_info("5") }


            {% endif %}
        {% else %}
                { action_respond_info("Bed Temp Heating - Setting Slow Speed") }
                SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=previous_error VALUE={1}
                SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=integral VALUE={0.11}
            #SET_FAN_SPEED FAN=BedFans SPEED={SLOW}  # Use heating process slow speed
                SET_FAN_SPEED FAN=BedOuter SPEED={SLOW}
                SET_FAN_SPEED FAN=BedInner SPEED={SLOW*FACTOR}


            UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5
        {% endif %}
    {% else %}
        SET_FAN_SPEED FAN=BedFans SPEED=0  # Turn off fans if temp is below threshold
    {% endif %}
    UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=10  # Continue monitoring every 10 seconds
